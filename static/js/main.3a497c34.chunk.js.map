{"version":3,"sources":["Components/Tile/Tile.js","Components/Board/Board.js","Components/Difficulty/Difficulty.js","Components/Controls/Controls.js","App.js","index.js"],"names":["Tile","props","type","min","max","value","onChange","event","onBoardChange","index","onClick","clickedTile","className","editedList","includes","highlight","clicked","Board","initBoard","board","map","tile","key","Difficulty","changeDiff","Controls","check","newGame","solved","restart","save","lastSession","App","initialBoard","length","push","setState","clickedRow","Math","floor","row","i","solvedBoard","state","solvedSudoku","position","sudoku","board_string_to_grid","indexOf","col","generate","level","solve","boardArr","checkGame","join","alert","solveGame","restartGame","changedBoard","target","onDifficultyChange","saveGame","stateSerialized","JSON","stringify","window","localStorage","setItem","storage","parse","getItem","playing","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3a497c34.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Tile.scss\";\r\n\r\nconst Tile = props => {\r\n  return (\r\n    <input\r\n      type=\"number\"\r\n      min=\"1\"\r\n      max=\"9\"\r\n      value={props.value < 1 || props.value > 9 ? \"\" : props.value}\r\n      onChange={event => props.onBoardChange(event, props.index)}\r\n      onClick={() => props.clickedTile(props.index)}\r\n      className={\r\n        (!props.editedList.includes(props.index) ? \"nonedit \" : \"edit\") +\r\n        (props.highlight.includes(props.index)\r\n          ? props.index === props.clicked\r\n            ? \" edited\"\r\n            : \" highlight\"\r\n          : \"\")\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","import React from \"react\";\r\nimport Tile from \"../Tile/Tile\";\r\nimport \"./Board.scss\";\r\n\r\nconst Board = props => {\r\n  const initBoard = props.board.map((tile, index) => (\r\n    <Tile\r\n      onBoardChange={props.onBoardChange}\r\n      value={tile === \".\" ? \"\" : tile}\r\n      key={index}\r\n      index={index}\r\n      clickedTile={props.clickedTile}\r\n      highlight={props.highlight}\r\n      editedList={props.editedList}\r\n      clicked={props.clicked}\r\n    />\r\n  ));\r\n\r\n  return <div className={\"board\"}>{initBoard}</div>;\r\n};\r\n\r\nexport default Board;\r\n","import React from \"react\";\r\nimport \"./Difficulty.scss\";\r\n\r\nconst Difficulty = props => {\r\n  return (\r\n    <div className=\"difficulty\">\r\n      <p>Difficulty:</p>\r\n      <select onChange={event => props.changeDiff(event)}>\r\n        <option value=\"easy\">easy</option>\r\n        <option value=\"medium\">medium</option>\r\n        <option value=\"hard\">hard</option>\r\n        <option value=\"very-hard\">very hard</option>\r\n        <option value=\"insane\">insane</option>\r\n        <option value=\"inhuman\">inhuman</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Difficulty;\r\n","import React from \"react\";\r\nimport \"./Controls.scss\";\r\n\r\nconst Controls = props => {\r\n  return (\r\n    <div className=\"Controls\">\r\n      <button onClick={() => props.check()}>Check</button>\r\n      <button onClick={() => props.newGame()}>New Game</button>\r\n      <button onClick={() => props.solved()}>Solve</button>\r\n      <button onClick={() => props.restart()}>Restart</button>\r\n      <button onClick={() => props.save()}>Save</button>\r\n      <button onClick={() => props.lastSession()}>Last Session</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Controls;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport Board from \"./Components/Board/Board\";\nimport sudoku from \"sudoku-umd\";\nimport Difficulty from \"./Components/Difficulty/Difficulty\";\nimport Controls from \"./Components/Controls/Controls\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      playing: false,\n      level: \"\",\n      initialBoard: [],\n      boardArr: [],\n      clicked: \"\",\n      highlight: [],\n      solvedSudoku: [],\n      editedList: []\n    };\n  }\n\n  editedList = board => {\n    let initialBoard = board;\n    let editedList = [];\n    for (let index = 0; index < board.length; index++) {\n      if (initialBoard[index] === \".\") {\n        editedList.push(index);\n      }\n    }\n    this.setState({ editedList: editedList });\n  };\n\n  highlight = index => {\n    let clickedRow = Math.floor(index / 9);\n    let row = [];\n    for (let i = 0; i < 9; i++) {\n      row.push(clickedRow * 9 + i);\n    }\n    let solvedBoard = this.state.solvedSudoku;\n    let grid = sudoku.board_string_to_grid(solvedBoard);\n    let position = grid[[clickedRow]].indexOf([...solvedBoard][index]);\n    let col = [];\n    for (let i = 0; i < 9; i++) {\n      col.push(i * 9 + position);\n    }\n    this.setState({\n      highlight: [...row, ...col]\n    });\n  };\n\n  newGame = () => {\n    const board = sudoku.generate(this.state.level);\n    this.setState(\n      {\n        initialBoard: [...board],\n        solvedSudoku: [...sudoku.solve(board)],\n        boardArr: [...board]\n      },\n      () => this.editedList(this.state.initialBoard)\n    );\n  };\n\n  checkGame = () => {\n    let check = this.state.boardArr.join(\"\");\n    sudoku.solve(check) === check\n      ? alert(\"Well done u did it !\")\n      : alert(\"You're close but not close enough\");\n  };\n\n  solveGame = () => {\n    let solved = this.state.solvedSudoku;\n    this.setState({ boardArr: solved });\n  };\n\n  restartGame = () => {\n    this.setState({ boardArr: this.state.initialBoard });\n  };\n\n  clickedTile = index => {\n    this.setState({ clicked: index }, () => this.highlight(this.state.clicked));\n  };\n\n  componentDidMount() {\n    this.newGame();\n  }\n\n  onBoardChange = (event, i) => {\n    let initialBoard = this.state.initialBoard;\n    let changedBoard = this.state.boardArr;\n    changedBoard[i] =\n      changedBoard[i] === \".\" ? event.target.value : initialBoard[i];\n    this.setState({\n      boardArr: changedBoard\n    });\n  };\n\n  onDifficultyChange = event => {\n    this.setState({ level: event.target.value }, () => this.newGame());\n  };\n\n  saveGame = () => {\n    let stateSerialized = JSON.stringify(this.state);\n    window.localStorage.setItem(\"state\", stateSerialized);\n  };\n\n  lastSession = () => {\n    let storage = JSON.parse(window.localStorage.getItem(\"state\"));\n    this.setState({ ...storage });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Sudoku</h1>\n        <Difficulty changeDiff={this.onDifficultyChange} />\n        <div className=\"view\">\n          <Board\n            board={this.state.boardArr}\n            onBoardChange={this.onBoardChange}\n            clickedTile={this.clickedTile}\n            highlight={this.state.highlight}\n            editedList={this.state.editedList}\n            clicked={this.state.clicked}\n          />\n          <Controls\n            check={this.checkGame}\n            newGame={this.newGame}\n            solved={this.solveGame}\n            restart={this.restartGame}\n            save={this.saveGame}\n            lastSession={this.lastSession}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}